// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/editor/internal/app"
	"github.com/fakovacic/editor/internal/app/editor"
	"sync"
)

// Ensure, that IOMock does implement editor.IO.
// If this is not the case, regenerate this file with moq.
var _ editor.IO = &IOMock{}

// IOMock is a mock implementation of editor.IO.
//
//	func TestSomethingThatUsesIO(t *testing.T) {
//
//		// make and configure a mocked editor.IO
//		mockedIO := &IOMock{
//			ReadFunc: func(contextMoqParam context.Context) (string, *app.FileMeta, error) {
//				panic("mock out the Read method")
//			},
//			WriteFunc: func(contextMoqParam context.Context, s1 string, s2 string) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedIO in code that requires editor.IO
//		// and then make assertions.
//
//	}
type IOMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(contextMoqParam context.Context) (string, *app.FileMeta, error)

	// WriteFunc mocks the Write method.
	WriteFunc func(contextMoqParam context.Context, s1 string, s2 string) error

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
	}
	lockRead  sync.RWMutex
	lockWrite sync.RWMutex
}

// Read calls ReadFunc.
func (mock *IOMock) Read(contextMoqParam context.Context) (string, *app.FileMeta, error) {
	if mock.ReadFunc == nil {
		panic("IOMock.ReadFunc: method is nil but IO.Read was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(contextMoqParam)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedIO.ReadCalls())
func (mock *IOMock) ReadCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *IOMock) Write(contextMoqParam context.Context, s1 string, s2 string) error {
	if mock.WriteFunc == nil {
		panic("IOMock.WriteFunc: method is nil but IO.Write was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(contextMoqParam, s1, s2)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedIO.WriteCalls())
func (mock *IOMock) WriteCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
