// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/editor/internal/app"
	"sync"
)

// Ensure, that HubMock does implement app.Hub.
// If this is not the case, regenerate this file with moq.
var _ app.Hub = &HubMock{}

// HubMock is a mock implementation of app.Hub.
//
//	func TestSomethingThatUsesHub(t *testing.T) {
//
//		// make and configure a mocked app.Hub
//		mockedHub := &HubMock{
//			BrodcastFunc: func(contextMoqParam context.Context, msgType app.MsgType, s1 string, s2 string, s3 string, fileMeta *app.FileMeta) error {
//				panic("mock out the Brodcast method")
//			},
//			CountRegisteredFunc: func() int {
//				panic("mock out the CountRegistered method")
//			},
//			CreateFunc: func(client *app.Client)  {
//				panic("mock out the Create method")
//			},
//			GetFunc: func(s string) (*app.Client, bool) {
//				panic("mock out the Get method")
//			},
//			GetByUsernameFunc: func(s string) bool {
//				panic("mock out the GetByUsername method")
//			},
//			RegisterFunc: func(client *app.Client)  {
//				panic("mock out the Register method")
//			},
//			SetPositionFunc: func(s string, position app.Position)  {
//				panic("mock out the SetPosition method")
//			},
//			SetReadyFunc: func(s string, b bool)  {
//				panic("mock out the SetReady method")
//			},
//			SetReadyAllFunc: func(b bool)  {
//				panic("mock out the SetReadyAll method")
//			},
//			UnregisterFunc: func(client *app.Client)  {
//				panic("mock out the Unregister method")
//			},
//		}
//
//		// use mockedHub in code that requires app.Hub
//		// and then make assertions.
//
//	}
type HubMock struct {
	// BrodcastFunc mocks the Brodcast method.
	BrodcastFunc func(contextMoqParam context.Context, msgType app.MsgType, s1 string, s2 string, s3 string, fileMeta *app.FileMeta) error

	// CountRegisteredFunc mocks the CountRegistered method.
	CountRegisteredFunc func() int

	// CreateFunc mocks the Create method.
	CreateFunc func(client *app.Client)

	// GetFunc mocks the Get method.
	GetFunc func(s string) (*app.Client, bool)

	// GetByUsernameFunc mocks the GetByUsername method.
	GetByUsernameFunc func(s string) bool

	// RegisterFunc mocks the Register method.
	RegisterFunc func(client *app.Client)

	// SetPositionFunc mocks the SetPosition method.
	SetPositionFunc func(s string, position app.Position)

	// SetReadyFunc mocks the SetReady method.
	SetReadyFunc func(s string, b bool)

	// SetReadyAllFunc mocks the SetReadyAll method.
	SetReadyAllFunc func(b bool)

	// UnregisterFunc mocks the Unregister method.
	UnregisterFunc func(client *app.Client)

	// calls tracks calls to the methods.
	calls struct {
		// Brodcast holds details about calls to the Brodcast method.
		Brodcast []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// MsgType is the msgType argument value.
			MsgType app.MsgType
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
			// S3 is the s3 argument value.
			S3 string
			// FileMeta is the fileMeta argument value.
			FileMeta *app.FileMeta
		}
		// CountRegistered holds details about calls to the CountRegistered method.
		CountRegistered []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Client is the client argument value.
			Client *app.Client
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// S is the s argument value.
			S string
		}
		// GetByUsername holds details about calls to the GetByUsername method.
		GetByUsername []struct {
			// S is the s argument value.
			S string
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Client is the client argument value.
			Client *app.Client
		}
		// SetPosition holds details about calls to the SetPosition method.
		SetPosition []struct {
			// S is the s argument value.
			S string
			// Position is the position argument value.
			Position app.Position
		}
		// SetReady holds details about calls to the SetReady method.
		SetReady []struct {
			// S is the s argument value.
			S string
			// B is the b argument value.
			B bool
		}
		// SetReadyAll holds details about calls to the SetReadyAll method.
		SetReadyAll []struct {
			// B is the b argument value.
			B bool
		}
		// Unregister holds details about calls to the Unregister method.
		Unregister []struct {
			// Client is the client argument value.
			Client *app.Client
		}
	}
	lockBrodcast        sync.RWMutex
	lockCountRegistered sync.RWMutex
	lockCreate          sync.RWMutex
	lockGet             sync.RWMutex
	lockGetByUsername   sync.RWMutex
	lockRegister        sync.RWMutex
	lockSetPosition     sync.RWMutex
	lockSetReady        sync.RWMutex
	lockSetReadyAll     sync.RWMutex
	lockUnregister      sync.RWMutex
}

// Brodcast calls BrodcastFunc.
func (mock *HubMock) Brodcast(contextMoqParam context.Context, msgType app.MsgType, s1 string, s2 string, s3 string, fileMeta *app.FileMeta) error {
	if mock.BrodcastFunc == nil {
		panic("HubMock.BrodcastFunc: method is nil but Hub.Brodcast was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		MsgType         app.MsgType
		S1              string
		S2              string
		S3              string
		FileMeta        *app.FileMeta
	}{
		ContextMoqParam: contextMoqParam,
		MsgType:         msgType,
		S1:              s1,
		S2:              s2,
		S3:              s3,
		FileMeta:        fileMeta,
	}
	mock.lockBrodcast.Lock()
	mock.calls.Brodcast = append(mock.calls.Brodcast, callInfo)
	mock.lockBrodcast.Unlock()
	return mock.BrodcastFunc(contextMoqParam, msgType, s1, s2, s3, fileMeta)
}

// BrodcastCalls gets all the calls that were made to Brodcast.
// Check the length with:
//
//	len(mockedHub.BrodcastCalls())
func (mock *HubMock) BrodcastCalls() []struct {
	ContextMoqParam context.Context
	MsgType         app.MsgType
	S1              string
	S2              string
	S3              string
	FileMeta        *app.FileMeta
} {
	var calls []struct {
		ContextMoqParam context.Context
		MsgType         app.MsgType
		S1              string
		S2              string
		S3              string
		FileMeta        *app.FileMeta
	}
	mock.lockBrodcast.RLock()
	calls = mock.calls.Brodcast
	mock.lockBrodcast.RUnlock()
	return calls
}

// CountRegistered calls CountRegisteredFunc.
func (mock *HubMock) CountRegistered() int {
	if mock.CountRegisteredFunc == nil {
		panic("HubMock.CountRegisteredFunc: method is nil but Hub.CountRegistered was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCountRegistered.Lock()
	mock.calls.CountRegistered = append(mock.calls.CountRegistered, callInfo)
	mock.lockCountRegistered.Unlock()
	return mock.CountRegisteredFunc()
}

// CountRegisteredCalls gets all the calls that were made to CountRegistered.
// Check the length with:
//
//	len(mockedHub.CountRegisteredCalls())
func (mock *HubMock) CountRegisteredCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCountRegistered.RLock()
	calls = mock.calls.CountRegistered
	mock.lockCountRegistered.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *HubMock) Create(client *app.Client) {
	if mock.CreateFunc == nil {
		panic("HubMock.CreateFunc: method is nil but Hub.Create was just called")
	}
	callInfo := struct {
		Client *app.Client
	}{
		Client: client,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	mock.CreateFunc(client)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedHub.CreateCalls())
func (mock *HubMock) CreateCalls() []struct {
	Client *app.Client
} {
	var calls []struct {
		Client *app.Client
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *HubMock) Get(s string) (*app.Client, bool) {
	if mock.GetFunc == nil {
		panic("HubMock.GetFunc: method is nil but Hub.Get was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedHub.GetCalls())
func (mock *HubMock) GetCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByUsername calls GetByUsernameFunc.
func (mock *HubMock) GetByUsername(s string) bool {
	if mock.GetByUsernameFunc == nil {
		panic("HubMock.GetByUsernameFunc: method is nil but Hub.GetByUsername was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetByUsername.Lock()
	mock.calls.GetByUsername = append(mock.calls.GetByUsername, callInfo)
	mock.lockGetByUsername.Unlock()
	return mock.GetByUsernameFunc(s)
}

// GetByUsernameCalls gets all the calls that were made to GetByUsername.
// Check the length with:
//
//	len(mockedHub.GetByUsernameCalls())
func (mock *HubMock) GetByUsernameCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetByUsername.RLock()
	calls = mock.calls.GetByUsername
	mock.lockGetByUsername.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *HubMock) Register(client *app.Client) {
	if mock.RegisterFunc == nil {
		panic("HubMock.RegisterFunc: method is nil but Hub.Register was just called")
	}
	callInfo := struct {
		Client *app.Client
	}{
		Client: client,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	mock.RegisterFunc(client)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedHub.RegisterCalls())
func (mock *HubMock) RegisterCalls() []struct {
	Client *app.Client
} {
	var calls []struct {
		Client *app.Client
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// SetPosition calls SetPositionFunc.
func (mock *HubMock) SetPosition(s string, position app.Position) {
	if mock.SetPositionFunc == nil {
		panic("HubMock.SetPositionFunc: method is nil but Hub.SetPosition was just called")
	}
	callInfo := struct {
		S        string
		Position app.Position
	}{
		S:        s,
		Position: position,
	}
	mock.lockSetPosition.Lock()
	mock.calls.SetPosition = append(mock.calls.SetPosition, callInfo)
	mock.lockSetPosition.Unlock()
	mock.SetPositionFunc(s, position)
}

// SetPositionCalls gets all the calls that were made to SetPosition.
// Check the length with:
//
//	len(mockedHub.SetPositionCalls())
func (mock *HubMock) SetPositionCalls() []struct {
	S        string
	Position app.Position
} {
	var calls []struct {
		S        string
		Position app.Position
	}
	mock.lockSetPosition.RLock()
	calls = mock.calls.SetPosition
	mock.lockSetPosition.RUnlock()
	return calls
}

// SetReady calls SetReadyFunc.
func (mock *HubMock) SetReady(s string, b bool) {
	if mock.SetReadyFunc == nil {
		panic("HubMock.SetReadyFunc: method is nil but Hub.SetReady was just called")
	}
	callInfo := struct {
		S string
		B bool
	}{
		S: s,
		B: b,
	}
	mock.lockSetReady.Lock()
	mock.calls.SetReady = append(mock.calls.SetReady, callInfo)
	mock.lockSetReady.Unlock()
	mock.SetReadyFunc(s, b)
}

// SetReadyCalls gets all the calls that were made to SetReady.
// Check the length with:
//
//	len(mockedHub.SetReadyCalls())
func (mock *HubMock) SetReadyCalls() []struct {
	S string
	B bool
} {
	var calls []struct {
		S string
		B bool
	}
	mock.lockSetReady.RLock()
	calls = mock.calls.SetReady
	mock.lockSetReady.RUnlock()
	return calls
}

// SetReadyAll calls SetReadyAllFunc.
func (mock *HubMock) SetReadyAll(b bool) {
	if mock.SetReadyAllFunc == nil {
		panic("HubMock.SetReadyAllFunc: method is nil but Hub.SetReadyAll was just called")
	}
	callInfo := struct {
		B bool
	}{
		B: b,
	}
	mock.lockSetReadyAll.Lock()
	mock.calls.SetReadyAll = append(mock.calls.SetReadyAll, callInfo)
	mock.lockSetReadyAll.Unlock()
	mock.SetReadyAllFunc(b)
}

// SetReadyAllCalls gets all the calls that were made to SetReadyAll.
// Check the length with:
//
//	len(mockedHub.SetReadyAllCalls())
func (mock *HubMock) SetReadyAllCalls() []struct {
	B bool
} {
	var calls []struct {
		B bool
	}
	mock.lockSetReadyAll.RLock()
	calls = mock.calls.SetReadyAll
	mock.lockSetReadyAll.RUnlock()
	return calls
}

// Unregister calls UnregisterFunc.
func (mock *HubMock) Unregister(client *app.Client) {
	if mock.UnregisterFunc == nil {
		panic("HubMock.UnregisterFunc: method is nil but Hub.Unregister was just called")
	}
	callInfo := struct {
		Client *app.Client
	}{
		Client: client,
	}
	mock.lockUnregister.Lock()
	mock.calls.Unregister = append(mock.calls.Unregister, callInfo)
	mock.lockUnregister.Unlock()
	mock.UnregisterFunc(client)
}

// UnregisterCalls gets all the calls that were made to Unregister.
// Check the length with:
//
//	len(mockedHub.UnregisterCalls())
func (mock *HubMock) UnregisterCalls() []struct {
	Client *app.Client
} {
	var calls []struct {
		Client *app.Client
	}
	mock.lockUnregister.RLock()
	calls = mock.calls.Unregister
	mock.lockUnregister.RUnlock()
	return calls
}
