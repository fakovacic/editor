// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/editor/internal/app"
	"sync"
)

// Ensure, that WriteValidatorMock does implement app.WriteValidator.
// If this is not the case, regenerate this file with moq.
var _ app.WriteValidator = &WriteValidatorMock{}

// WriteValidatorMock is a mock implementation of app.WriteValidator.
//
//	func TestSomethingThatUsesWriteValidator(t *testing.T) {
//
//		// make and configure a mocked app.WriteValidator
//		mockedWriteValidator := &WriteValidatorMock{
//			AddClientFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the AddClient method")
//			},
//			ClearFunc: func(contextMoqParam context.Context)  {
//				panic("mock out the Clear method")
//			},
//			IsReadyFunc: func(contextMoqParam context.Context) bool {
//				panic("mock out the IsReady method")
//			},
//			ReadyClientFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the ReadyClient method")
//			},
//			RemoveClientFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the RemoveClient method")
//			},
//			UnreadyClientFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the UnreadyClient method")
//			},
//		}
//
//		// use mockedWriteValidator in code that requires app.WriteValidator
//		// and then make assertions.
//
//	}
type WriteValidatorMock struct {
	// AddClientFunc mocks the AddClient method.
	AddClientFunc func(contextMoqParam context.Context, s string) error

	// ClearFunc mocks the Clear method.
	ClearFunc func(contextMoqParam context.Context)

	// IsReadyFunc mocks the IsReady method.
	IsReadyFunc func(contextMoqParam context.Context) bool

	// ReadyClientFunc mocks the ReadyClient method.
	ReadyClientFunc func(contextMoqParam context.Context, s string) error

	// RemoveClientFunc mocks the RemoveClient method.
	RemoveClientFunc func(contextMoqParam context.Context, s string) error

	// UnreadyClientFunc mocks the UnreadyClient method.
	UnreadyClientFunc func(contextMoqParam context.Context, s string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClient holds details about calls to the AddClient method.
		AddClient []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// Clear holds details about calls to the Clear method.
		Clear []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// IsReady holds details about calls to the IsReady method.
		IsReady []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// ReadyClient holds details about calls to the ReadyClient method.
		ReadyClient []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// RemoveClient holds details about calls to the RemoveClient method.
		RemoveClient []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// UnreadyClient holds details about calls to the UnreadyClient method.
		UnreadyClient []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
	}
	lockAddClient     sync.RWMutex
	lockClear         sync.RWMutex
	lockIsReady       sync.RWMutex
	lockReadyClient   sync.RWMutex
	lockRemoveClient  sync.RWMutex
	lockUnreadyClient sync.RWMutex
}

// AddClient calls AddClientFunc.
func (mock *WriteValidatorMock) AddClient(contextMoqParam context.Context, s string) error {
	if mock.AddClientFunc == nil {
		panic("WriteValidatorMock.AddClientFunc: method is nil but WriteValidator.AddClient was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockAddClient.Lock()
	mock.calls.AddClient = append(mock.calls.AddClient, callInfo)
	mock.lockAddClient.Unlock()
	return mock.AddClientFunc(contextMoqParam, s)
}

// AddClientCalls gets all the calls that were made to AddClient.
// Check the length with:
//
//	len(mockedWriteValidator.AddClientCalls())
func (mock *WriteValidatorMock) AddClientCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockAddClient.RLock()
	calls = mock.calls.AddClient
	mock.lockAddClient.RUnlock()
	return calls
}

// Clear calls ClearFunc.
func (mock *WriteValidatorMock) Clear(contextMoqParam context.Context) {
	if mock.ClearFunc == nil {
		panic("WriteValidatorMock.ClearFunc: method is nil but WriteValidator.Clear was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockClear.Lock()
	mock.calls.Clear = append(mock.calls.Clear, callInfo)
	mock.lockClear.Unlock()
	mock.ClearFunc(contextMoqParam)
}

// ClearCalls gets all the calls that were made to Clear.
// Check the length with:
//
//	len(mockedWriteValidator.ClearCalls())
func (mock *WriteValidatorMock) ClearCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockClear.RLock()
	calls = mock.calls.Clear
	mock.lockClear.RUnlock()
	return calls
}

// IsReady calls IsReadyFunc.
func (mock *WriteValidatorMock) IsReady(contextMoqParam context.Context) bool {
	if mock.IsReadyFunc == nil {
		panic("WriteValidatorMock.IsReadyFunc: method is nil but WriteValidator.IsReady was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockIsReady.Lock()
	mock.calls.IsReady = append(mock.calls.IsReady, callInfo)
	mock.lockIsReady.Unlock()
	return mock.IsReadyFunc(contextMoqParam)
}

// IsReadyCalls gets all the calls that were made to IsReady.
// Check the length with:
//
//	len(mockedWriteValidator.IsReadyCalls())
func (mock *WriteValidatorMock) IsReadyCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockIsReady.RLock()
	calls = mock.calls.IsReady
	mock.lockIsReady.RUnlock()
	return calls
}

// ReadyClient calls ReadyClientFunc.
func (mock *WriteValidatorMock) ReadyClient(contextMoqParam context.Context, s string) error {
	if mock.ReadyClientFunc == nil {
		panic("WriteValidatorMock.ReadyClientFunc: method is nil but WriteValidator.ReadyClient was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockReadyClient.Lock()
	mock.calls.ReadyClient = append(mock.calls.ReadyClient, callInfo)
	mock.lockReadyClient.Unlock()
	return mock.ReadyClientFunc(contextMoqParam, s)
}

// ReadyClientCalls gets all the calls that were made to ReadyClient.
// Check the length with:
//
//	len(mockedWriteValidator.ReadyClientCalls())
func (mock *WriteValidatorMock) ReadyClientCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockReadyClient.RLock()
	calls = mock.calls.ReadyClient
	mock.lockReadyClient.RUnlock()
	return calls
}

// RemoveClient calls RemoveClientFunc.
func (mock *WriteValidatorMock) RemoveClient(contextMoqParam context.Context, s string) error {
	if mock.RemoveClientFunc == nil {
		panic("WriteValidatorMock.RemoveClientFunc: method is nil but WriteValidator.RemoveClient was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockRemoveClient.Lock()
	mock.calls.RemoveClient = append(mock.calls.RemoveClient, callInfo)
	mock.lockRemoveClient.Unlock()
	return mock.RemoveClientFunc(contextMoqParam, s)
}

// RemoveClientCalls gets all the calls that were made to RemoveClient.
// Check the length with:
//
//	len(mockedWriteValidator.RemoveClientCalls())
func (mock *WriteValidatorMock) RemoveClientCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockRemoveClient.RLock()
	calls = mock.calls.RemoveClient
	mock.lockRemoveClient.RUnlock()
	return calls
}

// UnreadyClient calls UnreadyClientFunc.
func (mock *WriteValidatorMock) UnreadyClient(contextMoqParam context.Context, s string) error {
	if mock.UnreadyClientFunc == nil {
		panic("WriteValidatorMock.UnreadyClientFunc: method is nil but WriteValidator.UnreadyClient was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockUnreadyClient.Lock()
	mock.calls.UnreadyClient = append(mock.calls.UnreadyClient, callInfo)
	mock.lockUnreadyClient.Unlock()
	return mock.UnreadyClientFunc(contextMoqParam, s)
}

// UnreadyClientCalls gets all the calls that were made to UnreadyClient.
// Check the length with:
//
//	len(mockedWriteValidator.UnreadyClientCalls())
func (mock *WriteValidatorMock) UnreadyClientCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockUnreadyClient.RLock()
	calls = mock.calls.UnreadyClient
	mock.lockUnreadyClient.RUnlock()
	return calls
}
