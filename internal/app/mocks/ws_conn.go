// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fakovacic/editor/internal/app"
	"sync"
)

// Ensure, that WSConnMock does implement app.WSConn.
// If this is not the case, regenerate this file with moq.
var _ app.WSConn = &WSConnMock{}

// WSConnMock is a mock implementation of app.WSConn.
//
//	func TestSomethingThatUsesWSConn(t *testing.T) {
//
//		// make and configure a mocked app.WSConn
//		mockedWSConn := &WSConnMock{
//			WriteMessageFunc: func(messageType int, data []byte) error {
//				panic("mock out the WriteMessage method")
//			},
//		}
//
//		// use mockedWSConn in code that requires app.WSConn
//		// and then make assertions.
//
//	}
type WSConnMock struct {
	// WriteMessageFunc mocks the WriteMessage method.
	WriteMessageFunc func(messageType int, data []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// WriteMessage holds details about calls to the WriteMessage method.
		WriteMessage []struct {
			// MessageType is the messageType argument value.
			MessageType int
			// Data is the data argument value.
			Data []byte
		}
	}
	lockWriteMessage sync.RWMutex
}

// WriteMessage calls WriteMessageFunc.
func (mock *WSConnMock) WriteMessage(messageType int, data []byte) error {
	if mock.WriteMessageFunc == nil {
		panic("WSConnMock.WriteMessageFunc: method is nil but WSConn.WriteMessage was just called")
	}
	callInfo := struct {
		MessageType int
		Data        []byte
	}{
		MessageType: messageType,
		Data:        data,
	}
	mock.lockWriteMessage.Lock()
	mock.calls.WriteMessage = append(mock.calls.WriteMessage, callInfo)
	mock.lockWriteMessage.Unlock()
	return mock.WriteMessageFunc(messageType, data)
}

// WriteMessageCalls gets all the calls that were made to WriteMessage.
// Check the length with:
//
//	len(mockedWSConn.WriteMessageCalls())
func (mock *WSConnMock) WriteMessageCalls() []struct {
	MessageType int
	Data        []byte
} {
	var calls []struct {
		MessageType int
		Data        []byte
	}
	mock.lockWriteMessage.RLock()
	calls = mock.calls.WriteMessage
	mock.lockWriteMessage.RUnlock()
	return calls
}
