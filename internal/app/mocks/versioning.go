// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/editor/internal/app"
	"sync"
)

// Ensure, that VersioningMock does implement app.Versioning.
// If this is not the case, regenerate this file with moq.
var _ app.Versioning = &VersioningMock{}

// VersioningMock is a mock implementation of app.Versioning.
//
//	func TestSomethingThatUsesVersioning(t *testing.T) {
//
//		// make and configure a mocked app.Versioning
//		mockedVersioning := &VersioningMock{
//			SaveFunc: func(contextMoqParam context.Context, s1 string, s2 string) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedVersioning in code that requires app.Versioning
//		// and then make assertions.
//
//	}
type VersioningMock struct {
	// SaveFunc mocks the Save method.
	SaveFunc func(contextMoqParam context.Context, s1 string, s2 string) error

	// calls tracks calls to the methods.
	calls struct {
		// Save holds details about calls to the Save method.
		Save []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
	}
	lockSave sync.RWMutex
}

// Save calls SaveFunc.
func (mock *VersioningMock) Save(contextMoqParam context.Context, s1 string, s2 string) error {
	if mock.SaveFunc == nil {
		panic("VersioningMock.SaveFunc: method is nil but Versioning.Save was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}{
		ContextMoqParam: contextMoqParam,
		S1:              s1,
		S2:              s2,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(contextMoqParam, s1, s2)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedVersioning.SaveCalls())
func (mock *VersioningMock) SaveCalls() []struct {
	ContextMoqParam context.Context
	S1              string
	S2              string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S1              string
		S2              string
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
