// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/editor/internal/app"
	"sync"
)

// Ensure, that EditorMock does implement app.Editor.
// If this is not the case, regenerate this file with moq.
var _ app.Editor = &EditorMock{}

// EditorMock is a mock implementation of app.Editor.
//
//	func TestSomethingThatUsesEditor(t *testing.T) {
//
//		// make and configure a mocked app.Editor
//		mockedEditor := &EditorMock{
//			ChangeFunc: func(contextMoqParam context.Context, changeMsg *app.ChangeMsg) error {
//				panic("mock out the Change method")
//			},
//			FileMetaFunc: func(contextMoqParam context.Context) *app.FileMeta {
//				panic("mock out the FileMeta method")
//			},
//			LoadFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Load method")
//			},
//			ReadFunc: func(contextMoqParam context.Context) (string, error) {
//				panic("mock out the Read method")
//			},
//			UnloadFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Unload method")
//			},
//			WriteFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedEditor in code that requires app.Editor
//		// and then make assertions.
//
//	}
type EditorMock struct {
	// ChangeFunc mocks the Change method.
	ChangeFunc func(contextMoqParam context.Context, changeMsg *app.ChangeMsg) error

	// FileMetaFunc mocks the FileMeta method.
	FileMetaFunc func(contextMoqParam context.Context) *app.FileMeta

	// LoadFunc mocks the Load method.
	LoadFunc func(contextMoqParam context.Context) error

	// ReadFunc mocks the Read method.
	ReadFunc func(contextMoqParam context.Context) (string, error)

	// UnloadFunc mocks the Unload method.
	UnloadFunc func(contextMoqParam context.Context) error

	// WriteFunc mocks the Write method.
	WriteFunc func(contextMoqParam context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Change holds details about calls to the Change method.
		Change []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ChangeMsg is the changeMsg argument value.
			ChangeMsg *app.ChangeMsg
		}
		// FileMeta holds details about calls to the FileMeta method.
		FileMeta []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Load holds details about calls to the Load method.
		Load []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Unload holds details about calls to the Unload method.
		Unload []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockChange   sync.RWMutex
	lockFileMeta sync.RWMutex
	lockLoad     sync.RWMutex
	lockRead     sync.RWMutex
	lockUnload   sync.RWMutex
	lockWrite    sync.RWMutex
}

// Change calls ChangeFunc.
func (mock *EditorMock) Change(contextMoqParam context.Context, changeMsg *app.ChangeMsg) error {
	if mock.ChangeFunc == nil {
		panic("EditorMock.ChangeFunc: method is nil but Editor.Change was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ChangeMsg       *app.ChangeMsg
	}{
		ContextMoqParam: contextMoqParam,
		ChangeMsg:       changeMsg,
	}
	mock.lockChange.Lock()
	mock.calls.Change = append(mock.calls.Change, callInfo)
	mock.lockChange.Unlock()
	return mock.ChangeFunc(contextMoqParam, changeMsg)
}

// ChangeCalls gets all the calls that were made to Change.
// Check the length with:
//
//	len(mockedEditor.ChangeCalls())
func (mock *EditorMock) ChangeCalls() []struct {
	ContextMoqParam context.Context
	ChangeMsg       *app.ChangeMsg
} {
	var calls []struct {
		ContextMoqParam context.Context
		ChangeMsg       *app.ChangeMsg
	}
	mock.lockChange.RLock()
	calls = mock.calls.Change
	mock.lockChange.RUnlock()
	return calls
}

// FileMeta calls FileMetaFunc.
func (mock *EditorMock) FileMeta(contextMoqParam context.Context) *app.FileMeta {
	if mock.FileMetaFunc == nil {
		panic("EditorMock.FileMetaFunc: method is nil but Editor.FileMeta was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockFileMeta.Lock()
	mock.calls.FileMeta = append(mock.calls.FileMeta, callInfo)
	mock.lockFileMeta.Unlock()
	return mock.FileMetaFunc(contextMoqParam)
}

// FileMetaCalls gets all the calls that were made to FileMeta.
// Check the length with:
//
//	len(mockedEditor.FileMetaCalls())
func (mock *EditorMock) FileMetaCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockFileMeta.RLock()
	calls = mock.calls.FileMeta
	mock.lockFileMeta.RUnlock()
	return calls
}

// Load calls LoadFunc.
func (mock *EditorMock) Load(contextMoqParam context.Context) error {
	if mock.LoadFunc == nil {
		panic("EditorMock.LoadFunc: method is nil but Editor.Load was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(contextMoqParam)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedEditor.LoadCalls())
func (mock *EditorMock) LoadCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *EditorMock) Read(contextMoqParam context.Context) (string, error) {
	if mock.ReadFunc == nil {
		panic("EditorMock.ReadFunc: method is nil but Editor.Read was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(contextMoqParam)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedEditor.ReadCalls())
func (mock *EditorMock) ReadCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Unload calls UnloadFunc.
func (mock *EditorMock) Unload(contextMoqParam context.Context) error {
	if mock.UnloadFunc == nil {
		panic("EditorMock.UnloadFunc: method is nil but Editor.Unload was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockUnload.Lock()
	mock.calls.Unload = append(mock.calls.Unload, callInfo)
	mock.lockUnload.Unlock()
	return mock.UnloadFunc(contextMoqParam)
}

// UnloadCalls gets all the calls that were made to Unload.
// Check the length with:
//
//	len(mockedEditor.UnloadCalls())
func (mock *EditorMock) UnloadCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockUnload.RLock()
	calls = mock.calls.Unload
	mock.lockUnload.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *EditorMock) Write(contextMoqParam context.Context) error {
	if mock.WriteFunc == nil {
		panic("EditorMock.WriteFunc: method is nil but Editor.Write was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(contextMoqParam)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedEditor.WriteCalls())
func (mock *EditorMock) WriteCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
